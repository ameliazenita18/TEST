--SOAL1--
with top_countries as
(
	select country,sum("productPrice" * "productQuantity") as total_revenue2
	from "ecommerce-session-bigquery" esb 
	group by 1
	having sum("productPrice" * "productQuantity") != 0
	order by "total_revenue2"  desc
	limit 5
)
select esb."channelGrouping", t.country, sum("productPrice" * "productQuantity") as "total_revenue" 
from "ecommerce-session-bigquery" esb 
left join top_countries t
on esb.country = t.country
where esb.country != '(not set)' and "productQuantity" != 0
group by 1,2
order by "channelGrouping", "total_revenue"  desc

	select country, "v2ProductName", "productPrice" , "productQuantity"
	from "ecommerce-session-bigquery" esb 
	where country = 'United States' and "productQuantity" != 0




--SOAL2--
--Derive insights into user behavior. --
--Calculate metrics like average timeOnSite, average pageviews, and average sessionQualityDim for each fullVisitorId.-- 
--Identify users who spend above-average time on the site but view fewer pages than the average use--

WITH UserMetrics AS (
    -- Calculate average metrics for each user (fullVisitorId)
    select
        "fullVisitorId",
        round(AVG("timeOnSite")) AS avg_timeOnSite,
        round(AVG("pageviews")) AS avg_pageviews,
        round(AVG("sessionQualityDim")) AS avg_sessionQualityDim
    FROM
        "ecommerce-session-bigquery" esb 
    GROUP BY
        "fullVisitorId"
),
OverallAverages AS (
    -- Calculate overall averages for timeOnSite, pageviews, and sessionQualityDim
    SELECT
        round(AVG("timeOnSite")) AS avg_all_timeOnSite,
        round(AVG("pageviews")) AS avg_all_pageviews,
        round(AVG("sessionQualityDim")) AS avg_all_sessionQualityDim
    FROM
        "ecommerce-session-bigquery" esb 
)
SELECT
    um."fullVisitorId",
    um.avg_timeOnSite,
    um."avg_pageviews",
    um.avg_sessionQualityDim
FROM
    UserMetrics um
JOIN
    OverallAverages oa
ON
    um.avg_timeOnSite > oa.avg_all_timeOnSite  -- Users who spend above-average time on site
    AND um.avg_pageviews < oa.avg_all_pageviews  -- Users who view fewer pages than the average user
ORDER BY
    um.avg_timeOnSite DESC;



   
--SOAL3--
--Understand the performance of each product. 
--Design an SQL query that:
--Computes the total revenue generated by each product (v2ProductName).
--Determines the total quantity sold for each product.
--Calculates the total refund amount for each product.
--Rank products based on their net revenue (total revenue minus refunds) in a descending order. 
--Flag any product with a refund amount surpassing 10% of its total revenue.
 
 with product_performance as
 (
  select "v2ProductName", sum("productPrice" * "productQuantity") as total_revenue, sum("productQuantity") as total_qty_sold, 
  		  sum("productRefundAmount") as total_refund, ((sum("productPrice" * "productQuantity")) - SUM("productRefundAmount")) AS net_revenue
  from "ecommerce-session-bigquery" esb 
  group by "v2ProductName"
  order by net_revenue desc
 )
 select "v2ProductName","total_revenue", "total_qty_sold", "total_refund", "net_revenue",
        case when total_refund > (0.1 * "total_revenue") then 'YES'
             else 'NO'
             end as refund_above_10_percent
from product_performance


  
